# 1.MySql主从复制

## 1.1.安装mysql

### 1.1.2.卸载预装mysql

**查看已安装：**

```java
[root@centos upload]# rpm -qa|grep mysql
```

**卸载:**

```java
[root@centos upload]# rpm -e --nodeps mysql-libs-5.1.71-1.el6.x86_64
```

**再次查看：**

```java
[root@centos upload]# rpm -qa|grep mysql
```



### 1.1.3.上传安装包

### 1.1.4.解压安装包

```java
[root@centos upload]# tar -zxvf mysql-5.6.31-linux-glibc2.5-x86_64.tar.gz -C /usr/java
[root@centos upload]# cd /usr/java
[root@centos java]# mv mysql-5.6.31-linux-glibc2.5-x86_64 mysql
```

### 1.1.5.复制mysql的配置文件

```java
[root@centos java]# cd mysql
[root@centos java]# cp support-files/my-default.cnf /etc/my.cnf
[root@centos java]# cp support-files/mysql.server /etc/rc.d/init.d/mysql
```

### 1.1.6.修改my.cnf

**vim /etc/my.cnf**

```java
basedir = /usr/java/mysql
datadir = /usr/java/mysql/data
log-error = /usr/java/mysql/data/error.log
pid-file = /usr/java/mysql/data/mysql.pid
user = root
tmpdir = /tmp
```

### 1.1.7.初始化数据库

```
[root@centos java]# cd /usr/java/mysql
[root@centos mysql]# ./scripts/mysql_install_db --user=root --basedir=/usr/java/mysql --datadir=/usr/java/mysql/data --pid-file=/usr/java/mysql/data/mysql.pid --tmpdir=/tmp
```

### 1.1.8.配置mysql命令支持

如果提示没有mysql命令，需要添加软连接 

```java
[root@centos mysql]# ln -s /usr/java/mysql/bin/mysql /usr/bin/mysql
```

### 1.1.9.修改MySQL密码

```
[root@centos upload]# mysql -u root
mysql> use mysql;
mysql> update user set password= password("1111") where user='root';
mysql> flush privileges;
```

### 1.1.10.开放远程登录权限

```
mysql>GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY '1111' WITH GRANT OPTION;
mysql>FLUSH PRIVILEGES;
```

### 1.1.11.设置开机启动

```
[root@centos mysql]# chkconfig mysql on
```

## 1.2.MySQL主从复制

### 1.2.1.mysql主从简介

1. ```
   1. MySQL 默认支持主(master)从(slave)功能.
   2. 主从复制效果：在主数据库中操作时,从同步进行变化.
   3. 主从复制本质：主数据的操作写入到日志中,从数据库从日志中读取,进行操作.
   ```

   ```
   主从备份要素：
       1. 开启日志功能
       2. 每个数据库需要有一个 server_id,主 server_id 值小于从server_id(标识从哪server写入的)
       3. 每个 mysql 都有一个 uuid,由于虚拟机直接进行克隆,需要修改uuid 的值(唯一识别码)
       4. 必须要在主数据库中有一个用户具有被从数据库操作的权限.
   ```

   ### 1.2.2.配置mysql主从步骤

   #### 1.2.2.1.克隆mysql1的虚拟机

   #### 1.2.2.2.配置主数据库

   1、修改主数据库的my.cnf文件

![59325673002](C:\Users\ADMINI~1.201\AppData\Local\Temp\1593256730020.png)

2、重启mysql

[root@centos upload]# service mysql restart

3、通过命令可以观察主数据库在主从关系中状态.

#### 1.2.2.3.配置从数据库

1、修改server_id

![59325679214](C:\Users\ADMINI~1.201\AppData\Local\Temp\1593256792146.png)

2、data文件夹auto.cnf编写当前mysql的uuid

3、重启mysql

4、修改slave

```
mysql> stop slave;
mysql> change master to master_host='192.168.157.142',master_user='root',master_password='1111',master_log_file='master_log.000001';
mysql> start slave;
```

5、查看slave状态

mysql>show slave status \G;

![59325684864](C:\Users\ADMINI~1.201\AppData\Local\Temp\1593256848648.png)

![59325685592](C:\Users\ADMINI~1.201\AppData\Local\Temp\1593256855927.png)

6、验证主从关系

​      在主数据库中新建数据库,新建表,添加数据,观察从数据库的

# 2.MyCat

MyCAT是一个数据库中间件。国产开源项目，前身是cobar项目。对多数据库支持.

## 2.1.MyCat分库分表

垂直分割（分库）：指按照业务将表进行分类，分布到不同的数据库上面，这样也就将数据或者说压力分担到不同的库上面，

水平分割（分表）：一个表格的数据按照行分割到多个节点上

典型的分片规则：

​	根据主键编号进行hash、求余

## 2.2.MyCat安装

1、把MyCat的压缩包上传到linux服务器

2、解压缩，得到mycat目录

```
[root@centos upload]# tar -zxvf Mycat-server-1.6-RELEASE-20161028204710-linux.tar.gz -C /usr/java
```

3、启动和关闭MyCat

```
进入mycat/bin，启动MyCat
启动命令：./mycat start
停止命令：./mycat stop
重启命令：./mycat restart
查看状态：./mycat status
```

注意：可以使用mysql的客户端直接连接mycat服务。默认服务端口为8066

# 3.Mycat分库分表和读写分离

## 3.1.MyCat重要概念

```
1、逻辑库（schema）：一个包含了所有数据库的逻辑上的数据库

2、逻辑表（table）：一个包含了所有表的逻辑上的表

3、数据主机（dataHost）：数据库软件安装到哪个服务器上

4、数据节点（dataNode）：数据库软件中的 database

5、分片规则（rule）：拆分规则
```

### 3.2. 配置schema.xml

### Schema.xml介绍

Schema.xml作为MyCat中重要的配置文件之一，管理着MyCat的逻辑库、表、分片规则、DataNode以及DataSource。

```
<?xml version="1.0"?>
<!DOCTYPE mycat:schema SYSTEM "schema.dtd">
<mycat:schema xmlns:mycat="http://io.mycat/">
	<schema name="usian" checkSQLschema="false" sqlMaxLimit="100">
         <table name="tb_content" dataNode="dn1,dn2,dn3" rule="crc32slot" />
		<table name="tb_content_category" dataNode="dn1,dn2,dn3" rule="crc32slot1"/>
		<table name="tb_item" dataNode="dn1,dn2,dn3" rule="crc32slot2" />
		<table name="tb_item_cat" dataNode="dn1,dn2,dn3" rule="crc32slot3" />
		<table name="tb_item_desc" dataNode="dn1,dn2,dn3" rule="crc32slot4"  />
		<table name="tb_item_param" dataNode="dn1,dn2,dn3" rule="crc32slot5"  />
		<table name="tb_item_param_item" dataNode="dn1,dn2,dn3" rule="crc32slot6" />
		<table name="tb_order" dataNode="dn1,dn2,dn3" rule="crc32slot7" />
		<table name="tb_order_item" dataNode="dn1,dn2,dn3" rule="crc32slot8" />
		<table name="tb_order_shipping" dataNode="dn1,dn2,dn3" rule="crc32slot9" />
		<table name="tb_user" dataNode="dn1,dn2,dn3" rule="crc32slot10" />
	</schema>

​```
<dataNode name="dn1" dataHost="localhost1" database="db1" />
<dataNode name="dn2" dataHost="localhost1" database="db2" />
<dataNode name="dn3" dataHost="localhost1" database="db3" />

<dataHost name="localhost1" maxCon="1000" minCon="10" balance="0"
	writeType="0" dbType="mysql" dbDriver="native" switchType="1"  slaveThreshold="100">
	<heartbeat>select user()</heartbeat>
	<writeHost host="hostM1" url="192.168.233.137:3306" user="root" password="1111">
		<readHost host="hostS2" url="192.168.233.138:3306" user="root" password="1111" />
	</writeHost>
</dataHost>
​```

</mycat:schema>
```

## 3.3. 配置server.xml

### server.xml介绍

server.xml几乎保存了所有mycat需要的系统配置信息。最常用的是在此配置用户名、密码及权限。

### server.xml配置

```
<user name="root">
    <property name="password">1111</property>
    <property name="schemas">usian</property>
</user>

<user name="user">
    <property name="password">1111</property>
    <property name="schemas">usian</property>
    <property name="readOnly">true</property>
</user>
```

## 3.4.配置rule.xml

### 3.4.1.分片规则

#### 3.4.1.1.auto-sharding-long 规则

以 500 万为单位,实现分片规则：
1-500 万保存在 db1 中, 500 万零 1 到 1000 万保存在 db2 中,1000 万零 1 到 1500 万保存在 db3 中.

#### 3.4.1.2.crc32slot  规则

在 CRUD 操作时,根据具体数据的 crc32 算法计算,数据应该保存在哪一个dataNode 中

### 3.4.2.rule.xml配置

```
1）<columns>id</columns>中推荐配置主键列

2）所有的 tableRule 只能使用一次。如果需要为多个表配置相同的分片规则，那么需要在此重新定义该规则。

3) 要分片的数据库节点数量，必须指定，否则没法分片
```

```
<tableRule name="crc32slot1">
    <rule>
    	<columns>id</columns>
    	<algorithm>crc32slot</algorithm>
    </rule>
</tableRule>
<tableRule name="crc32slot2">
    <rule>
   	 	<columns>id</columns>
   		<algorithm>crc32slot</algorithm>
    </rule>
</tableRule>
<tableRule name="crc32slot3">
    <rule>
    	<columns>id</columns>
    	<algorithm>crc32slot</algorithm>
    </rule>
</tableRule>
<tableRule name="crc32slot4">
    <rule>
    	<columns>item_id</columns>
    	<algorithm>crc32slot</algorithm>
    </rule>
</tableRule>
<tableRule name="crc32slot5">
    <rule>
    	<columns>id</columns>
    	<algorithm>crc32slot</algorithm>
    </rule>
</tableRule>
<tableRule name="crc32slot6">
    <rule>
    	<columns>id</columns>
    	<algorithm>crc32slot</algorithm>
    </rule>
</tableRule>
<tableRule name="crc32slot7">
    <rule>
    	<columns>order_id</columns>
    	<algorithm>crc32slot</algorithm>
    </rule>
</tableRule>
<tableRule name="crc32slot8">
    <rule>
    	<columns>id</columns>
    	<algorithm>crc32slot</algorithm>
    </rule>
</tableRule>
<tableRule name="crc32slot9">
    <rule>
    	<columns>order_id</columns>
    	<algorithm>crc32slot</algorithm>
    </rule>
</tableRule>
<tableRule name="crc32slot10">
    <rule>
    	<columns>id</columns>
    	<algorithm>crc32slot</algorithm>
    </rule>
</tableRule>

<function name="crc32slot" class="io.mycat.route.function.PartitionByCRC32PreSlot">
    <property name="count">3</property><!-- 要分片的数据库数量，必须指定，否则没法分片 -->
</function>
```

## 3.5.测试

### 3.5.1.创建库

在主数据库中分别创建db1、db2、db3

### 3.5.2.创建表并插入数据

配置完毕后，重新启动mycat。

使用mysql客户端连接mycat，创建表并插入数据。

### 3.5.3.分库测试

### 3.5.4.项目测试

1、修改数据库url

```
spring:
  application:
    name: usian-item-service
  datasource:
    driver-class-name: com.mysql.jdbc.Driver
    url: jdbc:mysql://192.168.233.139:8066/usian?characterEncoding=UTF-8
    username: root
    password: 1111
    type: com.alibaba.druid.pool.DruidDataSource
```

