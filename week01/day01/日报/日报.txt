1.4.商品搜索

1.4.1.usian_search_service

1.4.1.2.service

     /**
         * 分页查询名字、类别、描述、卖点包含q的商品
         * @param q
         * @param page
         * @param pageSize
         * @return
         */
        @Override
        public List<SearchItem> selectByQ(String q, Long page, Integer pageSize) {
            try{
                SearchRequest searchRequest = new SearchRequest(ES_INDEX_NAME);
                searchRequest.types(ES_TYPE_NAME);
                SearchSourceBuilder searchSourceBuilder = new SearchSourceBuilder();
                //1、查询名字、描述、卖点、类别包括“q”的商品
                searchSourceBuilder.query(QueryBuilders.multiMatchQuery(q,new String[]{
                "item_title","item_desc","item_sell_point","item_category_name"}));
                //2、分页
                /**
                 * 1  0  20--->(p-1)*pageSize
                 * 2  20 20--->(2-1)*20
                 * 3  40 20--->(3-1)*20
                 */
                Long  from = (page - 1) * pageSize;
                searchSourceBuilder.from(from.intValue());
                searchSourceBuilder.size(pageSize);
                //3、高亮
                HighlightBuilder highlightBuilder = new HighlightBuilder();
                highlightBuilder.preTags("<font color='red'>");
                highlightBuilder.postTags("</font>");
                highlightBuilder.field("item_title");
                searchSourceBuilder.highlighter(highlightBuilder);
    
                searchRequest.source(searchSourceBuilder);
                SearchResponse response = restHighLevelClient.search(
                    			searchRequest, RequestOptions.DEFAULT);
                SearchHit[] hits = response.getHits().getHits();
                //4、返回查询结果
                List<SearchItem> searchItemList = new ArrayList<>();
                for (int i=0; i<hits.length; i++){
                    SearchHit hit = hits[i];
                    SearchItem searchItem = JsonUtils.jsonToPojo(hit.getSourceAsString(),
                                                                 SearchItem.class);
                    Map<String, HighlightField> highlightFields = hit.getHighlightFields();
                    if(highlightFields!=null && highlightFields.size()>0) {
          				searchItem.setItem_title(highlightFields.get("item_title").
                                   getFragments()[0].toString());
                    }
                    searchItemList.add(searchItem);
                }
                return searchItemList;
            }catch (Exception e){
                e.printStackTrace();
            }
            return null;
        }

1.4.1.3.controller

        @RequestMapping("/list")
        public List<SearchItem> selectByq(String q, Long page, Integer pageSize) 
            											throws IOException {
            return searchItemService.selectByq(q,page,pageSize);
        }

1.4.2.usian_search_feign

1.4.2.1.feign

    @RequestMapping("/service/searchItem/list")
        List<SearchItem> selectByq(@RequestParam String q, @RequestParam Long page, 
                                   					@RequestParam Integer pageSize);
    

1.4.3.usian_search_web

1.4.3.1.controller

        @RequestMapping("/list")
        public List<SearchItem> selectByQ(String q, @RequestParam(defaultValue = "1")
         			Long page, @RequestParam(defaultValue = "20") Integer pageSize){
            return searchItemFeign.selectByq(q,page,pageSize);
        }

1.4.4.测试

	

2.索引库同步

后台新增商品后需要把商品同步到索引库

2.1.分析

方案一：业务逻辑在usian_item_sevice中实现，添加商品的业务逻辑中，添加一个同步索引库的业务逻辑。

缺点：

	1、业务逻辑耦合度高（既维护商品又维护索引库）

方案二：业务逻辑在usian_search_service中实现，usian_item_sevice先添加商品，再调用usian_search_service服务同步索引库。

缺点：

	1、系统间耦合性太强（如果将来其他服务接入，usian_item_sevice还需要修改代码）

方案三：使用消息中间件



  类型           	特点                                      
  基本消息模型       	发送者------>queue----->消费者                
  work消息模型     	发送者------>queue----->多个消费者              
  广播-fanout消息模型	发送者----->exchange---->多个queue--->多个消费者  
  定向-direct消息模式	发送者----->exchange---routing key-->多个queue--->多个消费者
  通配符-topic消息模型	发送者----->exchange---星.routing key.星-->多个queue---->多个消费者



2.2.索引库同步

2.2.1.common_mapper

2.2.1.1.SearchItemMapper

    SearchItem getItemById(Long itemId);

2.2.1.2.SearchItemMapper.xml

    <select id="getItemById" parameterType="long" resultType="com.usian.pojo.SearchItem">
    	SELECT
    		a.id,
    		a.title item_title,
    		a.sell_point item_sell_point,
    		a.price item_price,
    		a.image item_image,
    		b.name item_category_name,
    		c.item_desc item_desc
    	FROM
    		tb_item a
    	JOIN tb_item_cat b ON a.cid = b.id
    	JOIN tb_item_desc c ON a.id = c.item_id
    	WHERE a.status = 1
    	  AND a.id=#{itemId}
    </select>

2.2.2.usian_search_service

2.2.2.1.pom.xml

    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-amqp</artifactId>
    </dependency>

2.2.2.2.application.yml

    spring:
      rabbitmq:
        host: 192.168.233.132
        username: admin
        password: 1111
        virtual-host: /

2.2.2.3.service

        @Override
        public int insertDocument(String itemId) throws IOException {
            // 1、根据商品id查询商品信息。
            SearchItem searchItem = searchItemMapper.getItemById(Long.valueOf(itemId));
    
            //2、添加商品到索引库
            IndexRequest indexRequest = new IndexRequest(ES_INDEX_NAME, ES_TYPE_NAME);
            indexRequest.source(JsonUtils.objectToJson(searchItem), XContentType.JSON);
            IndexResponse indexResponse = 
                restHighLevelClient.index(indexRequest,RequestOptions.DEFAULT);
            return indexResponse.getShardInfo().getFailed();
        }

2.2.2.4.listerner

    package com.usian.listener;
    
    import com.usian.service.SearchItemService;
    import org.elasticsearch.client.RestHighLevelClient;
    import org.springframework.amqp.core.ExchangeTypes;
    import org.springframework.amqp.rabbit.annotation.Exchange;
    import org.springframework.amqp.rabbit.annotation.Queue;
    import org.springframework.amqp.rabbit.annotation.QueueBinding;
    import org.springframework.amqp.rabbit.annotation.RabbitListener;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.stereotype.Component;
    
    @Component
    public class SearchMQListener {
    
        @Autowired
        private RestHighLevelClient restHighLevelClient;
    
        @Autowired
        private SearchItemService searchItemService;
    
        /**
         * 监听者接收消息三要素：
         *  1、queue
         *  2、exchange
         *  3、routing key
         */
        @RabbitListener(bindings = @QueueBinding(
            value = @Queue(value="search_queue",durable = "true"),
            exchange = @Exchange(value="item_exchage",type= ExchangeTypes.TOPIC),
            key= {"item.*"}
        ))
        public void listen(String msg) throws Exception {
            System.out.println("接收到消息：" + msg);
            int result = searchItemService.insertDocument(msg);
            if(result>0){
                throw new RuntimeException("同步失败");
            }
        }
    }

2.2.3.usian_item_service

2.2.3.1.pom.xml

    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-amqp</artifactId>
    </dependency>

2.2.3.2.application.yml

    spring:
      rabbitmq:
        host: 192.168.233.132
        username: admin
        password: 1111
        virtual-host: /

2.2.3.3.service

    	@Override
    	public Integer insertTbItem(TbItem tbItem, String desc, String itemParams) {
    		//补齐 Tbitem 数据
    		Long itemId = IDUtils.genItemId();
    		Date date = new Date();
    		tbItem.setId(itemId);
    		tbItem.setStatus((byte)1);
    		tbItem.setUpdated(date);
    		tbItem.setCreated(date);
    		Integer tbItemNum = tbItemMapper.insertSelective(tbItem);
    
    		//补齐商品描述对象
    		TbItemDesc tbItemDesc = new TbItemDesc();
    		tbItemDesc.setItemId(itemId);
    		tbItemDesc.setItemDesc(desc);
    		tbItemDesc.setCreated(date);
    		tbItemDesc.setUpdated(date);
    		Integer tbitemDescNum = tbItemDescMapper.insertSelective(tbItemDesc);
    
    		//补齐商品规格参数
    		TbItemParamItem tbItemParamItem = new TbItemParamItem();
    		tbItemParamItem.setItemId(itemId);
    		tbItemParamItem.setParamData(itemParams);
    		tbItemParamItem.setUpdated(date);
    		tbItemParamItem.setCreated(date);
    		Integer itemParamItmeNum = 
                tbItemParamItemMapper.insertSelective(tbItemParamItem);
    
    		//添加商品发布消息到mq
    		amqpTemplate.convertAndSend("item_exchage","item.add", itemId);
    
    		return tbItemNum + tbitemDescNum + itemParamItmeNum;
    	}

2.2.4.
